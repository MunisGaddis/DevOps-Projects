Install ubuntu server in Vmwareworkstation
sudo apt install net-tools
sudo apt install openssh-server
sudo apt install ubuntu-desktop
Access ubuntu vm from mobaxterm
*******************************************************************************************************************************
Install Jenkins
Install docker
Install trivy
Install Docker Scout
Make sure login to Docker Hub
docker login -u monudocker334
Enter Personal access Token
Login in with root 
curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b /usr/local/bin
***************************************************************************************************************************
Setup Sonarqube container

docker run -d --name sonar -p 9000:9000 sonarqube:lts-community
docker ps (You can see SonarQube container)

if you want it to restart automatically in the future, you can set a restart policy (e.g., --restart always):

docker run -d --name sonar \
  --restart=always \
  -p 9000:9000 \
  sonarqube:lts-community

access sonarqube IP:Port

Enter user name and Password : admin
Set new Password

*****************************************************************************************************************************
Now we need to install plugins in Jenkins

Eclipse Temurin
SonarQube Scanner
NodeJS
OWASP Dependency-Check
Docker
Docker commons
Docker Pipeline
Docker API
Docker-build-step
Pipeline: Stage View
Prometheus metrics
Email Extension Template

*******************************************************************************************************************
Tools configuration in Jenkins

JDK Configuration
Manage Jenkins > Tools > JDK Installations
Click Add JDK
Name:jdk17
✅ Check Install automatically
Select a JDK installer (usually from Oracle or AdoptOpenJDK).
For Java 17, choose:Version: 17
Accept the license agreement if prompted.

🎯 SonarQube Scanner
Manage Jenkins > Tools > SonarQube Scanner
Click Add SonarQube Scanner
Name:sonar-scanner
✅ Check Install automatically
Version:Choose Latest Version

🎯 Docker
Manage Jenkins > Tools > Docker Installations
Click Add Docker
Name:docker
✅ Check Install automatically
This will pull Docker binaries from docker.com.
Make sure your Jenkins agent node has permissions to install packages.

🎯 NodeJS
Manage Jenkins > Tools > NodeJS Installations
Click Add NodeJS
Name:node23
✅ Check Install automatically
Version:Pick Node.js version 23 (or the closest available).
Optionally, check Global npm packages to install, e.g.:
npm (if you want to pre-install npm globally)

🎯 OWASP Dependency-Check
Manage Jenkins > Tools > Dependency-Check Installations
Click Add Dependency-Check
Name:DP-Check
✅ Check Install automatically
It will install from the GitHub releases of OWASP Dependency-Check.
Usually it picks the latest stable version automatically.

🔍 Verify Your Installation
After configuration:

Go to Manage Jenkins > Global Tool Configuration
Confirm each tool shows as Installed/Ready
You can test by running a freestyle job that echoes the tool version, e.g.:

For NodeJS:
node --version
java -version
docker --version
sonar-scanner --version
dependency-check.sh --version

************************************************************************************************************************************************************************
Setup credentials in Jenkins

Create an App Password in Google
Login to your Google account at https://myaccount.google.com/.
Go to Security > 2-Step Verification, make sure it is enabled.
Scroll down to App Passwords.
Generate a new App Password:
Select App: e.g., Mail
Select Device: e.g., Other (Custom Name) and type Jenkins
Click Generate.
Copy the 16-character App Password (looks like abcd efgh ijkl mnop).
Note: Save it somewhere safe temporarily—you’ll need it in Jenkins credentials.
Configure App Password in Jenkins Credentials
*************************************************************************************************************************************************************
In Jenkins:
Manage Jenkins > Credentials > (global) > Add Credentials
Kind: Username with password
Username: Your full Gmail address (yourname@gmail.com)
Password: The App Password you copied
ID: email-creds
Description: email-creds
Save.

Configure Email Notification Settings

Manage Jenkins > Configure System
Scroll down to:
Extended E-mail Notification
Fields:
SMTP server: smtp.gmail.com
SMTP port: 465
Use SSL: ✔️ (checked)
Authentication:
Username: your Gmail
Password: (App Password)

⚠️ You wrote "Use OAuth 2.0"—if you’re using App Passwords, do NOT enable OAuth. Only one method applies.
✅ For your case (App Password), just use SMTP Auth, not OAuth.

✉️ Email Notification

SMTP server: smtp.gmail.com
Use SMTP Authentication: ✔️ (checked)
Username: your Gmail
Password: (App Password)
Use SSL: ✔️ (checked)
SMTP Port: 465
Reply-To Address: your Gmail address
Charset: (default is fine)

Test Configuration
Scroll to:Test e-mail recipient
Enter your Gmail (e.g., yourname@gmail.com) and click "Test Configuration".
**************************************************************************************************************************************************
Configure SonarQube Server in Jenkins
Navigate to: Manage Jenkins > Configure System
Find SonarQube servers section:
Name: sonar-server
Server URL: http://localhost:9000 (give vm ip instead of localhost)
Server Authentication Token:
Click Add.
Kind: Secret Text
Secret: (your SonarQube token)
ID: e.g., sonar-token
Select this token in the dropdown.
If your SonarQube is using HTTPS with a self-signed cert, make sure Java trusts the cert, or you may get SSL errors.
***********************************************************************************************************************
SonarQube Webhook Configuration for Jenkins

This webhook automatically notifies Jenkins when the analysis is done so Jenkins can process the 
Quality Gate status (e.g., fail the build if the gate fails).

Steps in SonarQube:
Login to SonarQube (http://192.168.88.128:9000).
In the top menu, click:
Administration > Configuration > Webhooks
Click Create.
Name:jenkins
URL:http://192.168.88.128:8080/sonarqube-webhook/
Save.
✅ Verify:

After your Jenkins build runs a SonarQube scan, you should see in SonarQube:
Administration > Configuration > Webhooks > Delivery History
showing successful calls to Jenkins.
***********************************************************************************************************************
🟢 Generate SonarQube Token
Login to SonarQube
Open your SonarQube URL in the browser.
Login as an admin or your user account.
Generate Token
Go to:
Administration ➡ Security ➡ Users
Click Tokens tab (or “My Account” > Security).
Under Generate Tokens, enter a Name (e.g., Jenkins-Token).
Click Generate.
Copy the token immediately—you won’t see it again.

🟢 Configure SonarQube Token in Jenkins
Go to Jenkins Dashboard
Manage Jenkins ➡ Credentials ➡ (global) ➡ Add Credentials
Add Credential
Kind: Secret text
Secret: Paste the SonarQube token you copied
ID: Sonar-Token

(Optional) Description: SonarQube Token for Jenkins
✅ This token will be used by Jenkins to authenticate with SonarQube when running scans.

🟢 (Optional) Configure Docker Hub Credentials in Jenkins
If you need Jenkins to push Docker images to Docker Hub, you must also store Docker Hub credentials:

Go to Jenkins Dashboard
Manage Jenkins ➡ Credentials ➡ (global) ➡ Add Credentials
Add Credential
Kind: Username with password
Username: Your Docker Hub username
Password: Your Docker Hub password or PAT
ID: docker
Description: docker
*********************************************************************************************************************
Default Email Triggers
When configuring post-build actions in your jobs (e.g., Editable Email Notification):

✅ Default Trigger Options:
Failure - Any
Always
Success

✅ You can check:

Failure - Any: send email if build fails
Success: send email on success
Always: send on every build
***************************************************************************************************************************************************************************
