Create image and push to docker hub

pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "monudocker334/devopsexamapp:latest"
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git url: 'https://github.com/KastroVKiran/devops-exam-app.git', 
                    branch: 'master'
            }
        }

        stage('Verify Docker Compose') {
            steps {
                sh '''
                docker compose version || { echo "Docker Compose not available"; exit 1; }
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                    ${SCANNER_HOME}/bin/sonar-scanner \
                      -Dsonar.projectName="devops-exam-app" \
                      -Dsonar.projectKey="devops-exam-app" \
                      -Dsonar.sources=. \
                      -Dsonar.language=py \
                      -Dsonar.python.version=3
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('backend') {
                    script {
                        withDockerRegistry(credentialsId: 'docker-creds', toolName: 'docker') {
                            sh "docker build -t ${DOCKER_IMAGE} ."
                        }
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-creds', toolName: 'docker') {
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                sh '''
                # Clean up any existing containers
                docker compose down --remove-orphans || true

                # Pull the latest image
                docker compose pull || true

                # Start services
                docker compose up -d

                # Wait for MySQL to be ready
                echo "Waiting for MySQL to be ready..."
                timeout 120s bash -c '
                while ! docker compose exec -T mysql mysqladmin ping -uroot -prootpass --silent 2>/dev/null;
                do 
                    sleep 5;
                    docker compose logs mysql --tail=5 || true;
                done'

                # Additional wait for initialization
                sleep 10
                '''
            }
        }

        stage('Verify Deployment') {
            steps {
                sh '''
                echo "=== Container Status ==="
                docker compose ps -a
                echo "=== Testing Flask Endpoint ==="
                curl -I http://localhost:5000 || true
                '''
            }
        }
    }

    post {
        success {
            echo 'Deployment successful!'
            sh 'docker compose ps'
            sh 'docker images | grep devopsexamapp'
        }
        failure {
            echo 'Pipeline failed. Check logs above.'
            sh '''
            echo "=== Error Investigation ==="
            docker compose logs --tail=50 || true
            '''
        }
        always {
            sh '''
            echo "=== Final Logs ==="
            docker compose logs --tail=20 || true
            '''
        }
    }
}

***************************************************************************************************************************
docker ps
access app localhost:5000

Login in to mysql:-
1. Accessing the MySQL Database
# Connect to MySQL container
docker exec -it mysql_db mysql -u root -p
# Enter password: rootpass when prompted

2. Common Database Operations
Once connected to MySQL:
-- Show all databases
SHOW DATABASES;

-- Use your application database
USE devops_exam;

-- Show all tables
SHOW TABLES;

-- View the structure of your results table
DESCRIBE results;

-- View all exam results
SELECT * FROM results;

-- View results sorted by score (highest first)
SELECT * FROM results ORDER BY score DESC;

-- View average score
SELECT AVG(score) FROM results;

-- View number of submissions
SELECT COUNT(*) FROM results;
**********************************************************************
Remove all containers, networks
cd /var/lib/jenkins/workspace/devopsexam
docker compose down
**********************************************************************
